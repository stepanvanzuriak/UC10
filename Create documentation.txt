> Create README description for the next create-react-app project:

•	This regular expression should validate the maximum string length (10); it should return true if the string length is within the acceptable range and false if it is not.
•	This regular expression should also validate that the string contains at least one uppercase letter, one lowercase letter, one digit, and one special character from a predefined list: !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~. It should return true if the criteria are met and false if they are not.
•	This regular expression should validate that the string does not contain any whitespace characters (spaces, tabs, or newlines). This should return a false if any whitespace characters are found.
•	The regular expression should be optimized for execution speed and simplicity. The regular expression should still fulfill all the above criteria.
•	The regular expression should be tested in code on a variety of sample inputs and edge cases (10) to ensure the regex is functioning properly.
•	The regular expression should be implemented within the code in a way that it can be easily reused for various inputs.
•	Implementation should not introduce any unexpected behavior or bugs.
•	Clear and concise documentation should be provided for the regular expression, explaining how it works, and any caveats or limitations.
• React UI with a text input field and validation for this field that should apply regexp validation to this field.

---

# React RegExp Validator README

## Project Overview

The React RegExp Validator is a `create-react-app` project designed to validate input strings based on a specific set of criteria using regular expressions. The aim is to ensure that strings adhere to certain rules for security or data integrity purposes.

## Regular Expression Criteria

1. **String Length**: Validates a maximum string length of 10 characters.
2. **Character Types**:
    - At least one uppercase letter.
    - At least one lowercase letter.
    - At least one digit.
    - At least one special character from the list: `!"#$%&'()*+,-./:

;<=>?@[\]^_`{|}~`
3. **No Whitespace**: Validates that the string does not contain any whitespace characters (spaces, tabs, or newlines).
4. **Optimization**: The regex should be optimized for execution speed and simplicity while still fulfilling all the aforementioned criteria.

## Implementation

- The regular expression is implemented as a utility function, making it reusable for various input validation scenarios.
- The React UI features a text input field, and upon entry or change, it runs the validation against the input value.
- The UI will provide visual feedback (success or error) based on the validation result.

## Testing

The regular expression is tested on a variety of sample inputs and edge cases to ensure it functions properly:

1. `Aa1!` - Valid
2. `Aa1!Bb2@` - Valid
3. `AAAAAAA1!` - Invalid (missing lowercase)
4. `aaaaaaa1!` - Invalid (missing uppercase)
5. `AaAaAaAaA` - Invalid (missing special character)
6. `AaAa AaAaA` - Invalid (whitespace present)
7. `AaAaAaAaAaA` - Invalid (exceeds length)
8. `AaA!` - Invalid (missing digit)
9. `111!!` - Invalid (missing uppercase & lowercase)
10. `AaBbCcDdE` - Invalid (missing special character)

(Note: These are sample test cases. More comprehensive testing should be done during development.)

## Documentation

The regex works by segmenting the various checks into separate lookaheads. This allows for simultaneous validation of multiple criteria without consuming any characters, ensuring all checks are met before a match is returned.

### Regular Expression Breakdown:

```regex
^(?=.+[A-Z])(?=.+[a-z])(?=.+\d)(?=.+[!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~])(?!\S{11,})(?!\s).{1,10}$
```

1. `^(?=...)`: The caret (`^`) asserts the position at the start of the line.
2. `(?=.+[A-Z])`: This positive lookahead ensures the presence of an uppercase letter.
3. `(?=.+[a-z])`: Checks for a lowercase letter.
4. `(?=.+\d)`: Ensures a digit is present.
5. `(?=.+[!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~])`: Checks for a special character.
6. `(?!\S{11,})`: This negative lookahead ensures that the non-space string doesn't exceed 10 characters.
7. `(?!\s)`: This negative lookahead checks for the absence of any whitespace.
8. `.{1,10}$`: Ensures that the entire string is between 1 to 10 characters in length.

## Caveats & Limitations

- This regex is tailored to the requirements as specified. If the criteria change, modifications will be needed.
- While optimized, very long strings might still introduce a performance overhead when being checked.
- The predefined list of special characters might not cater to all possible use cases. Adjust as necessary.

## UI

The React application provides an intuitive interface for users to input their string. Real-time feedback is provided on whether the string meets the criteria or not. A clear error message highlights which criteria is not being met, enhancing user experience.

---

## Getting Started

1. **Installation**: Clone the repository and run `npm install` to install dependencies.
2. **Run the App**: Use `npm start` to run the app locally.
3. **Testing**: Run `npm test` to execute the test cases.

---

Thank you for using the React RegExp Validator! For questions or feedback, please open an issue on our GitHub repository.